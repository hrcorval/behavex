        {%- extends "base.jinja2" -%}
        {%- set menu = 'report' -%}
        {%- set total_steps = steps | length -%}
        {%- block title -%}Test Execution Report{%- endblock -%}
        {%- block iframe -%}
            <div style="display: none" id="iframe-container">
                <div id="div-iframe" style="width:97%;height:97%;border:1px solid
                #ddd;position:absolute;z-index: 1;background-color:white;">
                </div>
                <div class="pull-right" style="padding-right: 3%">
                    <a href="#" class="btn btn-xs btn-warning pull-left"
                           data-close-iframe>Close X</a>
                       <div class="navbar-static-top" style="z-index: 1;
                    position:absolute;">
                        <a href="#" class="btn btn-xs btn-warning"
                           data-close-iframe>Close X</a>
                    </div>
                </div>
                <div class="pull-left" style="padding-right: 3%">
                    <a href="#" class="btn btn-xs btn-warning pull-left"
                           data-close-iframe>Close X</a>
                       <div class="navbar-static-top" style="z-index: 1;
                    position:absolute;">
                        <a href="#" class="btn btn-xs btn-warning"
                           data-close-iframe>Close X</a>
                    </div>
                </div>
            </div>
        {%- endblock -%}

        {%- block link_css -%}
        <style>
        .timeline-container {
            width: 100%;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f8f8f8;
            margin-bottom: 10px;
            padding: 10px;
            overflow: visible; /* Allow tooltips to show outside */
        }

        .worker-timeline-row {
            display: flex;
            align-items: center;
            margin-bottom: 0px;
            height: 28px;
        }

        .worker-timeline-row:last-child {
            margin-bottom: 0;
        }

        .worker-label {
            width: 80px;
            font-size: 12px;
            font-weight: bold;
            color: #666;
            text-align: right;
            padding-right: 10px;
            flex-shrink: 0;
        }

        .worker-timeline {
            flex: 1;
            height: 20px;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 3px;
            position: relative;
            overflow: visible; /* Allow tooltips to show outside */
        }

        .scenario-segment {
            height: 100%;
            cursor: pointer;
            border: 1px solid #ccc;
            transition: opacity 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 10px;
            text-shadow: 0 1px 1px rgba(0,0,0,0.3);
            box-sizing: border-box;
            z-index: 1;
        }

        .scenario-segment:hover {
            opacity: 0.8;
            z-index: 1000;
        }

        .scenario-passed {
            background-color: #71C176;
        }

        .scenario-failed {
            background-color: #F7819F;
        }

        .scenario-skipped {
            background-color: #999;
        }

        .scenario-untested {
            background-color: #ccc;
        }

        /* Ensure tooltips appear above everything */
        .tooltip {
            z-index: 10000 !important;
        }

        .tooltip-inner {
            max-width: 600px !important;
        }

        .timeline-summary {
            text-align: center;
            color: #666;
            margin-top: 5px;
        }
        </style>
        {%- endblock -%}

        {%- block body -%}
            <table class="table table-bordered behavex_letter" id="summary">
                <thead>
                    <tr class="table-header">
                        {%- set total_features = features|length -%}
                        {%- if total_features <= 1 -%}
                            <th>Feature</th>
                        {%- else -%}
                            <th>Feature ({{ total_features }} features)</th>
                        {%- endif -%}
                        <th style="width:120px">Total</th>
                        <th style="width:120px">Executed</th>
                        <th style="width:180px">Status</th>
                        <th style="width:100px">Duration</th>
                    </tr>
                </thead>
                {%- for feature in features -%}
                    <!--<tr class="table_row_{{ feature.status }} data_feature feature-scenario"
                        data-feature-tags="{{ feature|create_tags_set }}">-->
                    <tr class="table_row_{{ feature.status }} data_feature feature-scenario"
                        data-feature-tags="{{ feature|create_tags_set }}" feature_{{ feature.status }}>
                        <td title="Feature" class="{{ [feature.status]|calculate_color }}-behavex">
                             <span class="glyphicon glyphicon-menu-right pull-left"
                                   data-feature-id="{{ feature.id }}"
                                   data-feature title="{{ ('commons.expand'|get_text).format('scenarios') }}">
                                   <b class="span-behavex">{{ feature.name }}</b>
                             </span>
                        </td>
                        <td title="Total">
                            {{summary[feature.name]['Total']}}
                            {%- set muted = summary[feature.name]['muted'] -%}
                            {%- if muted > 0 -%}
                                &nbsp;&nbsp;<span class="glyphicon glyphicon-volume-off" data-muted="{{ muted }}"
                                    title="There {{ 'is 1 muted scenario' if muted == 1 else 'are ' ~ muted ~ ' muted scenarios'}}">
                                </span>
                            {%- endif -%}
                        </td>
                        <td title="Executed">
                            {{summary[feature.name]['Executed']}} ({{summary[feature.name]['Execution Status']|int}}%)
                        </td>
                        <td title="Status">
                            <table><tr>
                                <td style="width:40px" class="{{ [summary[feature.name]['Failed'] > 0 and 'failed' or 'passed']|calculate_color }}-behavex">{{summary[feature.name]['Pass Rate']|int}}%&nbsp;</td>
                                <td style="width:140px">
                                    <div class="progress  progress-expand-steps">
                                        {%- set fe_total = summary[feature.name]['Total'] -%}
                                        {%- set fe_passed = summary[feature.name]['Passed'] -%}
                                        {%- set fe_failed = summary[feature.name]['Failed'] -%}
                                        {%- set fe_skipped = summary[feature.name]['Skipped'] -%}
                                        {{ fe_total|create_progress_html(fe_passed,fe_failed,fe_skipped)|safe }}
                                    </div>
                                </td>
                            </tr></table>
                        </td>
                        <td title="Duration">{{summary[feature.name]['Duration']|pretty_print_time }}</td>
                    </tr>
                    <tr style="display: None" data-feature-id="{{ feature.id }}">
                        <td colspan="5">
                            {{ print_feature(feature) }}
                        </td>
                    </tr>
                {%- endfor -%}
                <tr class="behavex-row-total">
                    <!-- iteritems has been changed to items -->
                    <td><b>{{fields_total['Totals']}}</b></td>
                    <td><b>{{fields_total['Total']}}</b></td>
                    <td><b>{{fields_total['Executed']}} ({{fields_total['Execution Status']|int}}%)</b></td>
                    <td>
                        <table><tr>
                            <td style="width:40px" class="{{ [fields_total['Failed'] > 0 and 'failed' or 'passed']|calculate_color }}-behavex"><b>{{fields_total['Pass Rate']|int}}%&nbsp;</b></td>
                            <td style="width:140px">
                                <div class="progress progress-expand-steps">
                                    {%- set fe_total = fields_total['Total'] -%}
                                    {%- set fe_passed = fields_total['Passed'] -%}
                                    {%- set fe_failed = fields_total['Failed'] -%}
                                    {%- set fe_skipped = fields_total['Skipped'] -%}
                                    {{ fe_total|create_progress_html(fe_passed,fe_failed,fe_skipped)|safe }}
                                </div>
                            </td>
                        </tr></table>
                    </td>
                    <td><b>{{fields_total['Duration']|pretty_print_time }}</b></td>
                </tr>
            </table>

            {# Modal dialog related to logs and additional evidence #}
             <div class="modal fade " id="modal-logs" style="display: None">
                <div class="modal-dialog modal-dialog-style">
                    <div class="modal-content modal-style">
                        <div class="modal-header">
                            <a class="close" data-dismiss="modal">&times;</a>
                        </div>
                        <div class="modal-body modal-style-body">
                        </div>
                    </div>
                </div>
            </div>

        {%- endblock -%}
        {%- block filter -%}
            <div id="accordion2" role="tablist" aria-multiselectable="true">
                <div class="panel panel-default container_body">
                    <div class="panel-heading" role="tab" id="headingOne">
                        <button class="btn btn-info btn-sm" type="button" data-toggle="collapse"
                                data-target="#collapse-filters" aria-expanded="true"
                                aria-controls="collapse-filters">Filters</button>&nbsp;
                        <button class="btn btn-info btn-sm" type="button" data-toggle="collapse"
                                data-target="#collapse-metrics" aria-expanded="false"
                                aria-controls="collapse-metrics">Metrics</button>
                    </div>
                </div>
                <div id="collapse-metrics" class="metrics-hidden behavex-big-row panel-collapse collapse in"
                     role="tabpanel" aria-labelledby="headingOne">
                    <div class="panel-body">
                        <div class="container-fluid behavex-row-total">
                            <div class="col-xs-12">
                                <div class="col-xs-3">
                                    <h5><b>Automation Rate: {{ '%10.0f' % (((total - not_automated)/ total)|float * 100.0)|round }}%</b></h5>
                                    <canvas id="chart-automation-rate"></canvas>
                                </div>
                                <div class="col-xs-3">
                                    <h5 id="h5-status"><b>Pass Rate: {{ '%10.0f' % ((passed/((passed + failed) or 1))|float * 100.0)|round }}%</b></h5>
                                    <canvas id="chart-pass-rate"></canvas>
                                </div>
                                <div class="col-xs-6">
                                    <h5 id="h5-status"><b>Steps: {{ total_steps }}</b><b class="span-behavex" id="reusability"></b></h5>
                                    <canvas id="chart-steps"></canvas>
                                </div>
                            </div>
                            <div class="col-xs-12" style="margin-top: 20px;">
                                <div class="col-xs-12">
                                                                        <h5><b>Execution Timeline</b></h5>
                                    <div class="timeline-container">
                                        {%- set worker_scenarios = {} -%}
                                        {%- set all_scenarios = [] -%}

                                        {# Collect scenarios by worker #}
                                        {%- for feature in features -%}
                                            {%- for scenario in feature.scenarios -%}
                                                {%- if scenario.start is defined and scenario.duration is defined and scenario.duration > 0 and scenario.status in ['passed', 'failed', 'error'] -%}
                                                    {%- set worker_id = scenario.worker_id|default('0') -%}
                                                    {%- set scenario_data = {
                                                        'name': scenario.name,
                                                        'feature': feature.name,
                                                        'start': scenario.start,
                                                        'stop': scenario.start + (scenario.duration * 1000),
                                                        'duration': scenario.duration,
                                                        'status': scenario.status,
                                                        'worker_id': worker_id
                                                    } -%}
                                                    {%- set _ = all_scenarios.append(scenario_data) -%}

                                                    {%- if worker_id not in worker_scenarios -%}
                                                        {%- set _ = worker_scenarios.update({worker_id: []}) -%}
                                                    {%- endif -%}
                                                    {%- set _ = worker_scenarios[worker_id].append(scenario_data) -%}
                                                {%- endif -%}
                                            {%- endfor -%}
                                        {%- endfor -%}

                                        {%- if all_scenarios|length > 0 -%}
                                            {# Calculate real execution timeline from first start to last end #}
                                            {%- set timeline_start = all_scenarios|map(attribute='start')|min -%}
                                            {%- set timeline_end = all_scenarios|map(attribute='stop')|max -%}
                                            {%- set timeline_duration_ms = timeline_end - timeline_start -%}
                                            {%- set timeline_duration = timeline_duration_ms / 1000 -%}

                                            {# Sort workers numerically by converting to int #}
                                            {%- set worker_list = [] -%}
                                            {%- for worker_id in worker_scenarios.keys() -%}
                                                {%- set _ = worker_list.append(worker_id|int) -%}
                                            {%- endfor -%}
                                            {%- set sorted_worker_ids = worker_list|sort -%}
                                            {%- set sorted_workers = [] -%}
                                            {%- for worker_id in sorted_worker_ids -%}
                                                {%- set _ = sorted_workers.append(worker_id|string) -%}
                                            {%- endfor -%}

                                            {%- for worker_id in sorted_workers -%}
                                                <div class="worker-timeline-row">
                                                    <div class="worker-label">Worker {{ worker_id }}</div>
                                                    <div class="worker-timeline">
                                                        {%- set worker_scenarios_sorted = worker_scenarios[worker_id]|sort(attribute='start') -%}

                                                        {# Position scenarios based on real start times within the execution timeline #}
                                                        {%- for scenario in worker_scenarios_sorted -%}
                                                            {%- set scenario_start_offset_ms = scenario.start - timeline_start -%}
                                                            {%- set scenario_start_offset = scenario_start_offset_ms / 1000 -%}
                                                            {%- set left_percent = (scenario_start_offset / timeline_duration * 100)|round(2) -%}
                                                            {%- set scenario_width_percent = (scenario.duration / timeline_duration * 100)|round(2) -%}
                                                            {%- set scenario_width_percent = [scenario_width_percent, 1.0]|max -%}
                                                            {%- set status_class = 'passed' if scenario.status == 'passed' else ('failed' if scenario.status in ['failed', 'error'] else ('skipped' if scenario.status == 'skipped' else ('untested' if scenario.status == 'untested' else 'skipped'))) -%}
                                                            <div class="scenario-segment scenario-{{ status_class }}"
                                                                 style="position: absolute; left: {{ left_percent }}%; width: {{ scenario_width_percent }}%;"
                                                                 data-scenario-name="{{ scenario.name|e }}"
                                                                 data-feature-name="{{ scenario.feature|e }}"
                                                                 data-status="{{ scenario.status }}"
                                                                 data-start="{{ scenario.start }}"
                                                                 data-duration="{{ scenario.duration }}"
                                                                 data-worker-id="{{ worker_id }}">
                                                            </div>
                                                        {%- endfor -%}

                                                        {# Scenarios positioned based on real timeline #}
                                                    </div>
                                                </div>
                                            {%- endfor -%}
                                        {%- else -%}
                                            <div style="padding: 20px; text-align: center; color: #666; font-style: italic;">
                                                No scenarios found with timing data (start time, duration > 0)
                                            </div>
                                        {%- endif -%}
                                    </div>
                                                                        <div class="timeline-summary">
                                        {%- if all_scenarios|length > 0 -%}
                                            {%- set passed_count = all_scenarios|selectattr("status", "equalto", "passed")|list|length -%}
                                            {%- set failed_count = all_scenarios|selectattr("status", "in", ["failed", "error"])|list|length -%}
                                            {%- set skipped_count = all_scenarios|selectattr("status", "equalto", "skipped")|list|length -%}
                                            {%- set untested_count = all_scenarios|selectattr("status", "equalto", "untested")|list|length -%}
                                            {%- set status_parts = [] -%}
                                            {%- if passed_count > 0 -%}{%- set _ = status_parts.append(passed_count ~ " passed") -%}{%- endif -%}
                                            {%- if failed_count > 0 -%}{%- set _ = status_parts.append(failed_count ~ " failed") -%}{%- endif -%}
                                            {%- if skipped_count > 0 -%}{%- set _ = status_parts.append(skipped_count ~ " skipped") -%}{%- endif -%}
                                            {%- if untested_count > 0 -%}{%- set _ = status_parts.append(untested_count ~ " untested") -%}{%- endif -%}
                                            <small>{{ all_scenarios|length }} scenarios across {{ sorted_workers|length }} workers
                                            {%- if status_parts|length > 0 -%} | {{ status_parts|join(" | ") }}{%- endif -%}</small>
                                        {%- else -%}
                                            <small>0 scenarios executed (dry run or all scenarios skipped/untested)</small>
                                        {%- endif -%}
                                        <br>
                                        <small style="color: #888; font-style: italic;">
                                            💡 Tip: If execution appears unbalanced across workers, consider using @ORDER tags to control test execution sequence for better load distribution.
                                        </small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xs-12" style="margin-bottom: 30px;">
                                <!-- Extra space after timeline -->
                            </div>
                        </div>
                    </div>
                </div>
                <div id="collapse-filters" class="behavex-big-row panel-collapse collapse in"
                     role="tabpanel" aria-labelledby="headingOne">
                    <div class="panel-body">
                        <div class="container-fluid behavex-row-total">
                            <div class="row"><br>
                                <div class="col-sm-3 pull-left report-filter">
                                    <div class="form-group form-group-sm">
                                        <b>
                                        <label class="control-label pull-left"
                                               style="padding-top: 5px;padding-right:3px;font-size: 12px;">Search</label>
                                        <input placeholder="Scenario name..."
                                               type="text"
                                               class="input-group form-control-static input-search"
                                               style="height: 25px"
                                               data-search>
                                        </b>
                                    </div>
                                </div>
                                <div class="col-sm-3 pull-left report-filter">
                                    <div class="form-group form-group-sm">
                                        <label class="control-label pull-left"
                                               style="padding-top: 5px;padding-right:3px;font-size: 12px;">
                                            {{ 'report.filter_tag.label'|get_text }}
                                        </label>
                                        <select class="select-filter  form-control-static"
                                                style="height: 25px"
                                                data-select-filter-tags>
                                            <option value="all">All</option>
                                            {%- for tag in tags|sort -%}
                                                <option value="{{ tag }}"> {{ tag }} </option>
                                            {%- endfor -%}
                                        </select>
                                    </div>
                                </div>
                                <div class="col-sm-3 pull-left report-filter">
                                    <div class="form-group form-group-sm">
                                        <label class="control-label pull-left"
                                               style="padding-top: 5px;padding-right:3px;font-size: 12px;">
                                            {{ 'report.filter_status.label'|get_text }}
                                        </label>
                                        <select class="select-filter  form-control-static"
                                                style="height: 25px"
                                                data-select-filter-status>
                                            <option value="all">All</option>
                                            <option value="failed">Failed</option>
                                            <option value="skipped">Not Run</option>
                                            <option value="passed">Passed</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-sm-3 pull-left" >
                                    <div class="form-group form-group-sm">
                                        <button type="button" class="btn btn-info btn-xs"
                                                id="button-reset-filter" data-reset-filter>
                                            <b>{{ 'report.reset_filter.label'|get_text }}</b>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        {%- endblock -%}

        {%- macro print_feature(feature) -%}
            <div class="panel-default feature behavex_letter">
                <div class="panel-body">
                    <table class="table table-bordered behavex_letter table-scenario" >
                    <colgroup>
                        <col><col style="width: 80px"><col style="width: 80px"><col style="width: 80px"><col style="width: 180px">
                    </colgroup>
                    {%- if feature.background.steps|count > 0  -%}
                        <tr style="display: none" data-info-background="{{ feature.name }}"
                            class="panel-header">
                            <td colspan="5">
                                <ul class="background-scenario list-unstyled behavex_letter ul-background-behavex">
                                    {%- for step in feature.background.steps -%}
                                        <li><b>{{ step|resolving_type(feature.background, True)|safe~ ' ' }}</b> {{step.name|e }}
                                        {%- if 'table' in step -%}
                                            <ul data-table>
                                                <li class="list-group-item" style="padding:3px 3px">
                                                <table class="table table-hover behavex_letter table-bordered">
                                                    <tr class="table-header">
                                                        {%- for key in step.table -%}
                                                            <th>{{ key }}</th>
                                                        {%- endfor -%}
                                                    </tr>
                                                    {%- for i in range(((step.table.values()|list)[0])|count) -%}
                                                        <tr>
                                                            {%- for key in step.table -%}
                                                                <td>{{ step.table[key][i]|e }}</td>
                                                            {%- endfor -%}
                                                        </tr>
                                                    {%- endfor -%}
                                                </table>
                                                </li>
                                            </ul>
                                        {%- endif -%}
                                        </li>
                                    {%- endfor -%}
                                </ul>
                            </td>
                        </tr>
                    {%- endif -%}
                    <tr class="table-header">
                        <th style="width: auto">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scenario&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            {%- if feature.background.steps|count > 0 -%}
                                <a data-name-background="{{ feature.name}}" style="cursor:pointer;"
                                   data-background data-show="false"
                                   title="{{ ('commons.expand'|get_text).format('background') }}"><small
                                        class="behavex-letter" data-name-background="{{ feature.name}}"
                                           data-background>{{'report.show_background'|get_text}}</small>
                                </a>
                            {%- endif -%}
                        </th>
                        <th style="width: 80px;height: 24px" class="text-center">Type</th>
                        <th style="width: 80px;height: 24px" class="text-center">Status</th>
                        <th style="width: 80px;height: 24px" class="text-center">Duration</th>
                        <th style="width: 180px;height: 24px" class="text-center">Evidence</th>
                    </tr>
                    {%- for scenario in feature.scenarios -%}
                        {%- set scenario_hash = scenario.identifier_hash if scenario.identifier_hash is defined else (feature.filename + "-" + scenario.line|string)|get_string_hash -%}
                        <!-- scenario_hash has been forced to be a string -->
                        {%- set scenario_hash = scenario_hash|string -%}
                        {%- set scenario_tags = scenario|get_scenario_tags -%}
                        {%- set scenario_background_failed = True if (scenario.error_background and (scenario.status == 'failed' or scenario.status == 'error' or scenario.status == 'untested')) else False -%}
                        {%- set scenario_crashed = True if ((scenario.status == 'failed' or scenario.status == 'error') and not scenario.error_background and not scenario.error_step) else False -%}
                        <tr class="table_row_commons behavex_letter feature-scenario text-center"
                                data-scenario-tags="{{ scenario_tags|to_string_list }}">
                            <td class="text-left grey-behavex">
                                <div class="{{ [scenario.status]|calculate_color }}-behavex alert-{{ scenario.status|resolving_color_class }} behavex_letter alert-behavex scenario-step">
                                    &nbsp;
                                    <span class="glyphicon glyphicon-menu-right" data-id-hash="{{ scenario.id_hash }}"
                                          title="{{ ('commons.expand'|get_text).format('scenario') }}" data-scenario>
                                          <b class="span-behavex" style="cursor: pointer;">{{scenario.name|e}}</b>&nbsp;<b class="glyphicon glyphicon-copy glyphicon-scenario link-cursor"
                                             title="Copy scenario name" data-copy-text="{{scenario.name|e}}"></b>
                                        {%- if ('MUTE' in scenario|get_scenario_tags) -%}
                                            &nbsp;<b class="glyphicon glyphicon-volume-off glyphicon-scenario" title="{{ 'report.muted'|get_text }}"></b>
                                        {%- endif -%}
                                    </span>
                                    {% if scenario.retried is defined %}
                                        &nbsp;<b class="glyphicon glyphicon-repeat disabled red-behavex glyphicon-scenario" title="{{ 'report.icon_repeat.title'|get_text}}"
                                                 data-duplicated data-id_hash="{{ scenario.id_hash }}"></b>
                                    {% endif %}
                                </div>
                                <div data-div-id_hash="{{ scenario.id_hash }}"
                                     style="display: None" class="pull-left gherkin">
                                    {% if scenario_tags %}
                                        <ul class="list-unstyled ul-tags-behavex label-behavex" style="font-size: 10px">
                                            {%- for tag in scenario_tags -%}
                                                {%- if [tag]|match_for_execution -%}
                                                    <li style="float:left;vertical-align: middle;padding:4px 14px 2px 2px;"
                                                        class="{{ [scenario.status]|calculate_color}}-behavex" title="{{ 'report.execution_tag'|get_text }}">
                                                                <a class="link-cursor text-info" data-tag="{{ tag }}">{{ tag }}</a></li>
                                                {%- else -%}
                                                    <li style="float:left;vertical-align: middle;padding:4px 14px 2px 2px;">
                                                                <a class="link-cursor text-secondary" data-tag="{{ tag }}">{{ tag }}</a></li>
                                                {%- endif -%}
                                            {%- endfor -%}
                                        </ul>
                                    {%- endif -%}
                                    {%- if scenario_crashed -%}
                                        <br>
                                        <p style="padding-left:12px;padding-top:15px;padding-bottom:2px" data-div-id_hash="{{ scenario.id_hash }}">
                                            <span class="glyphicon glyphicon-warning-sign"></span>
                                            <b>{{ scenario.error_msg }}</b>
                                            <br>
                                        <hr class='line-behavex-background'>
                                    {%- elif scenario_background_failed -%}
                                        <br>
                                        <p style="padding-left:12px;padding-top:15px;padding-bottom:2px" data-div-id_hash="{{ scenario.id_hash }}">
                                            <span class="glyphicon glyphicon-warning-sign"></span>
                                            <b>{{ 'commons.error_background'|get_text }}:</b>
                                             <ul class='list-unstyled scenario-step'>
                                                {{ print_step(scenario, scenario.error_step ) }}
                                             </ul>
                                            <br>
                                        <hr class='line-behavex-background'>
                                    {%- else -%}
                                        <br>
                                    {%- endif -%}
                                    <ul class='list-unstyled scenario-step'
                                        data-div-id_hash="{{ scenario.id_hash }}"
                                        style="display: None;width: 100%">
                                        {%- for step in scenario['steps'] -%}
                                            {{ print_step(scenario, step)}}
                                        {%- endfor -%}
                                    </ul>
                                </div>
                            </td>
                            <td>
                                {%- if "MANUAL" in scenario_tags -%}
                                    <p class="text-center">Manual</p>
                                    </td>
                                    <td>&nbsp;&nbsp;Untested</td>
                                    <td ><p class="text-center" title="{{ 'commons.text.total_time'|get_text }}"><b>0s</b></p></td>
                                    <td><a charset=utf-8 class="btn btn-info btn-xs" title="{{ 'report.icon_duplicate.title'|get_text}}" data-share>
                                        <span class="glyphicon glyphicon-share"></span></a>
                                    </td>
                                {%- elif "WIP" in scenario_tags -%}
                                    <p class="text-center">Work In Progress</p>
                                    </td>
                                    <td>&nbsp;&nbsp;Untested</td>
                                    <td ><p class="text-center" title="{{ 'commons.text.total_time'|get_text }}">0s</p></td>
                                    <td><a charset=utf-8 class="btn btn-info btn-xs" title="{{ 'report.icon_duplicate.title'|get_text}}" data-share>
                                        <span class="glyphicon glyphicon-share"></span></a>
                                    </td>
                                {%- else -%}
                                    {%- set scenario_hash = scenario_hash|string -%}
                                    <p class="text-center">Automated</p>
                                    </td>

                                    {%- if "Skipped" in scenario.status|capitalize -%}
                                        <td><p><b>&nbsp;Skipped</b></p></td>
                                        <td>
                                            <p class="text-center" title="{{ 'commons.text.total_time'|get_text }}"><b>0s</b></p>
                                        </td>
                                    {%- else -%}
                                        <td><p><b>&nbsp;{{ scenario.status|capitalize }}</b></p></td>
                                        <td>
                                            <p class="text-center" title="{{ 'commons.text.total_time'|get_text }}">
                                                <b>{{ scenario.duration|pretty_print_time }}</b>
                                            </p>
                                        </td>
                                    {%- endif -%}

                                    <td style="width: 190px;">
                                        <div class="btn-group text-left">
                                            {%- set scenario_hash = scenario_hash|string -%}
											{%- set path_log = get_path_log(scenario) -%}
											{%- set path_log = path_log|string -%}
                                            {%- set path_log_scenario = path_join(path_log, scenario_hash , 'scenario.log')-%}
											{%- set path_log_scenario = path_log_scenario|string -%}
                                            {%- set path_img_scenario = path_join(path_log, scenario_hash, 'images.html')-%}
											{%- set path_img_scenario = path_img_scenario|string -%}
                                            {%- if path_log_scenario|path_exist_in_output and not scenario_crashed -%}
                                                <a href="{{ path_log_scenario|replace(get_env('OUTPUT'), '.')|normalize_path|urlencode }}"
                                                   charset="utf-8" class="btn btn-info btn-xs" title="View Test Logs"
                                                   data-log>
                                                   <span class="glyphicon glyphicon-zoom-in"></span></a>
                                            {%- endif -%}
                                            {%- if  path_img_scenario|path_exist_in_output -%}
                                                <a href="{{ path_img_scenario|replace(get_env('OUTPUT'), '.')|normalize_path|urlencode }}"
                                                   title="View screenshots"
                                                   class="btn btn-info btn-xs" data-image>
                                                    <span class="glyphicon glyphicon-picture"></span></a>
                                            {%- endif -%}
                                            {%- if scenario|exist_extra_logs -%}
                                                {% set path_extra = scenario|get_path_extra_logs %}
                                                <a href=""
                                                   data-path-extra="{{ path_extra}}"
                                                   title="Additional Evidence"
                                                   class="btn btn-info btn-xs"  >
                                                    <span class="glyphicon glyphicon-list"></span></a>
                                                <div class="list-group list-extra-log"  style="display: None">
                                                {% set path_extra_logs_relative = scenario|get_relative_extra_logs_path %}
                                                {% for log in scenario|get_extra_logs_file %}
                                                        <a data-name="{{ log}}" target="_blank" href="{{path_extra_logs_relative ~ log}}" title="{{ log }}" class="list-group-item list-extra-log-item">{{ log }}</a>
                                                {% endfor %}
                                                </div>
                                            {% endif %}
                                            <a charset=utf-8 class="btn btn-info btn-xs" title="{{ 'report.icon_duplicate.title'|get_text}}" data-share>
                                                <span class="glyphicon glyphicon-share"></span>
                                            </a>
                                        </div>
                                    </td>
                                {%- endif -%}
                        </tr>
                    {%- endfor -%}
                </table>
            </div>
        </div>
        {%- endmacro -%}
        {%- macro print_step(scenario, step) -%}
            <li style="width: 100%;float: left;"><b>{{ step|resolving_type(scenario)|safe }}</b> {{ ((step.name) ~ test_status_text)|e }}
            {%- if 'table' in step -%}
                <table class="table table-hover behavex_letter table-step-value">
                    <tr class="{{scenario.status|resolving_color_class}} table-header">
                        {%- for key in step.table -%}
                            <th>{{ key |e}}</th>
                        {%- endfor -%}
                    </tr>
                    {% set table_values = step.table.values()|list %}
                    {%- for i in range(table_values[0]|count) -%}
                        <tr>
                            {%- for key in step.table -%}
                                <td>{{ step.table[key][i]|e }}</td>
                            {%- endfor -%}
                        </tr>
                    {%- endfor -%}
                </table>
            {%- endif -%}
            {% if step.text is defined and step.text != "None" %}
            <div>
                <pre class="small behavex_letter">{{ step.text|e }}</pre>
            </div>

            {% endif%}
            {%- if step.status == 'failed' or step.status == 'error' or step.status == 'undefined' -%}
                <p class="p-step-error"><b>&nbsp;&nbsp;(Step {{step.status }})</b></p>
                 {%- set error_msg, error_lines, error_step = scenario|gather_errors(true) -%}
                 {%- if error_msg or error_lines -%}
                    <ul class="list-unstyled">
                        <li>
                            <pre class="red-behavex behavex_letter">
                                {%- if error_msg -%}
                                    {%- for line in error_msg -%}
                                        {%- if line -%}
                                            {{ line|print_error|e }}<br>
                                        {%- endif -%}
                                    {%- endfor -%}
                                {%- else -%}
                                    {%- for line in error_lines -%}
                                        {%- if line -%}
                                            {{ line|print_error|e }}<br>
                                        {%- endif -%}
                                    {%- endfor -%}
                                {%- endif -%}
                            </pre>
                        </li>
                    </ul>
                 {%- endif -%}
            {%- endif -%}
            </li>
        {%- endmacro -%}

        {%- block javascript -%}

        {{ super() }}

//<![CDATA[
        // This JavaScript has been refactored to:
        // 1. Use proper CDATA markers to prevent minification issues
        // 2. Replace inline onclick handlers with data-* attributes
        // 3. Add event delegation using $(document).on() to handle dynamically added elements
        // 4. Move handlers into the document.ready function for better organization
        // 5. Ensure all JavaScript is properly encapsulated and follows best practices

        $(document).ready(function(){
            iframe = false;

            // Debug: Check if scenario segments exist
            console.log('Found', $('.scenario-segment').length, 'scenario segments');
            $('.scenario-segment').each(function(i) {
                console.log('Segment', i, ':', $(this).data('scenario-name'));
            });

            // Remove any existing title attributes to prevent dual tooltips
            $('.scenario-segment').removeAttr('title');

            // Enhanced tooltips for timeline segments with debouncing for fast mouse movement
            var tooltipTimeout;
            var currentTooltipElement = null;

            $('.scenario-segment').on('mouseenter', function() {
                var $this = $(this);

                // Clear any existing timeout
                if (tooltipTimeout) {
                    clearTimeout(tooltipTimeout);
                }

                // Destroy any existing tooltip immediately
                if (currentTooltipElement && currentTooltipElement.get(0) !== $this.get(0)) {
                    try {
                        currentTooltipElement.tooltip('hide').tooltip('destroy');
                    } catch (e) { /* ignore */ }
                }

                currentTooltipElement = $this;

                // Debounce tooltip creation to prevent rapid fire events
                tooltipTimeout = setTimeout(function() {
                    try {
                        var scenarioName = $this.data('scenario-name') || 'Unknown Scenario';
                        var featureName = $this.data('feature-name') || 'Unknown Feature';
                        var status = $this.data('status') || 'unknown';
                        var start = $this.data('start');
                        var duration = $this.data('duration');

                        // Ensure we have valid numeric values
                        start = (start !== undefined && start !== null && !isNaN(start)) ? parseFloat(start) : 0;
                        duration = (duration !== undefined && duration !== null && !isNaN(duration)) ? parseFloat(duration) : 0;

                        // Format duration like "1m 0.4s" or "11h 18m 12.3s"
                        function formatDuration(seconds) {
                            if (isNaN(seconds) || seconds < 0) return '0s';

                            var hours = Math.floor(seconds / 3600);
                            var minutes = Math.floor((seconds % 3600) / 60);
                            var secs = (seconds % 60);

                            var result = '';
                            if (hours > 0) result += hours + 'h ';
                            if (minutes > 0) result += minutes + 'm ';
                            if (secs > 0 || result === '') {
                                if (secs % 1 === 0) {
                                    result += secs + 's';
                                } else {
                                    result += secs.toFixed(1) + 's';
                                }
                            }
                            return result.trim();
                        }



                        // Format start time as HH:MM:SS only (no date)
                        function formatStartTime(timestamp) {
                            if (isNaN(timestamp) || timestamp <= 0) return 'N/A';

                            try {
                                var date;
                                // Handle milliseconds timestamp (like 1755135608226)
                                if (timestamp > 1000000000000) {
                                    date = new Date(timestamp);
                                }
                                // Handle seconds timestamp
                                else if (timestamp > 1600000000) {
                                    date = new Date(timestamp * 1000);
                                }
                                // Small numbers are relative time
                                else {
                                    return formatDuration(timestamp) + ' from start';
                                }



                                // Format as HH:MM:SS only (no date)
                                return String(date.getHours()).padStart(2, '0') + ':' +
                                       String(date.getMinutes()).padStart(2, '0') + ':' +
                                       String(date.getSeconds()).padStart(2, '0');
                            } catch (e) {
                                return 'N/A';
                            }
                        }

                        var formattedDuration = formatDuration(duration);
                        var formattedStartTime = formatStartTime(start);

                        // Format status safely
                        var formattedStatus = 'Unknown';
                        if (status && typeof status === 'string') {
                            if (status === 'idle') {
                                formattedStatus = 'Idle';
                            } else {
                                formattedStatus = status.charAt(0).toUpperCase() + status.slice(1).toLowerCase();
                            }
                        }

                        var tooltipContent = [
                            '<div style="background: rgba(0,0,0,1.0); color: white; padding: 15px; border-radius: 6px; font-size: 13px; max-width: 600px; min-width: 300px; line-height: 1.5; white-space: normal; word-wrap: break-word; border: 1px solid #333; box-shadow: 0 4px 8px rgba(0,0,0,0.3); text-align: left;">',
                            '<strong>' + featureName + '</strong><br/>',
                            '<strong>Scenario:</strong> ' + scenarioName + '<br/>',
                            '<strong>Status:</strong> ' + formattedStatus + '<br/>',
                            '<strong>Start time:</strong> ' + formattedStartTime + '<br/>',
                            '<strong>Duration:</strong> ' + formattedDuration,
                            '</div>'
                        ].join('');

                        // Safely destroy any existing tooltip first
                        try {
                            $this.tooltip('hide').tooltip('destroy');
                        } catch (e) { /* ignore */ }

                        // Clear any existing title attributes
                        $this.removeAttr('title').removeAttr('data-original-title');

                        // Create and show new tooltip
                        $this.tooltip({
                            title: tooltipContent,
                            html: true,
                            placement: 'auto top',
                            trigger: 'manual',
                            container: 'body',
                            template: '<div class="tooltip" role="tooltip" style="z-index: 10000;"><div class="tooltip-arrow"></div><div class="tooltip-inner" style="background: transparent; border: none; padding: 0; max-width: none; min-width: 300px;"></div></div>'
                        }).tooltip('show');

                    } catch (error) {
                        console.warn('Tooltip error:', error);
                        // Fallback to simple title attribute
                        var fallbackTitle = scenarioName + ' (' + formattedStatus + ') - ' + formattedDuration;
                        $this.attr('title', fallbackTitle);
                    }
                }, 150); // 150ms delay to prevent rapid fire events
            }).on('mouseleave', function() {
                var $this = $(this);

                // Clear the timeout to prevent tooltip creation if mouse left quickly
                if (tooltipTimeout) {
                    clearTimeout(tooltipTimeout);
                    tooltipTimeout = null;
                }

                // Hide and destroy tooltip with delay to allow mouse to reach tooltip
                setTimeout(function() {
                    try {
                        $this.tooltip('hide').tooltip('destroy');
                        $this.removeAttr('title').removeAttr('data-original-title');
                    } catch (e) { /* ignore */ }
                }, 100);

                // Clear current element reference
                if (currentTooltipElement && currentTooltipElement.get(0) === $this.get(0)) {
                    currentTooltipElement = null;
                }
            });

            // Event handler for copy buttons
            $(document).on('click', '[data-copy-text]', function(e){
                e.stopPropagation();
                var text = $(this).attr('data-copy-text');
                copyToClipboard(text);
            });

            // Event handler for tag links
            $(document).on('click', '[data-tag]', function(e){
                e.preventDefault();
                var tag = $(this).attr('data-tag');
                show_tag(tag);
            });

            // Event handler for share buttons
            $(document).on('click', '[data-share]', function(e){
                e.preventDefault();
                var scenario = $(this).closest('tr').find("td:first").find('span:first');
                var feature_id = scenario.parents('div.feature').parents('tr[data-feature-id]').attr('data-feature-id');
                var url = $(location).attr('href').split('#')[0];
                result = url + '#scenario=' + feature_id + '-' + scenario.attr('data-id-hash');
                copyToClipboard(result);
                alert("Test scenario link copied!");
            });

            // Event handler for scenario expand/collapse
            $(document).on('click', '[data-scenario]', function(e){
                e.stopPropagation();
                var element = $(this);
                var id = element.attr('data-id-hash');
                var div = $('[data-div-id_hash='+ id +']');
                if (element.hasClass('glyphicon-menu-right')) {
                    div.css('display', '');
                    element.removeClass('glyphicon-menu-right');
                    element.addClass('glyphicon-menu-down');
                    element.attr('title', "{{ ('commons.collapse'|get_text).format('scenario')}}");
                } else {
                    div.css('display', 'None')
                    element.removeClass('glyphicon-menu-down');
                    element.addClass('glyphicon-menu-right');
                    element.attr('title', "{{ ('commons.expand'|get_text).format('scenario')}}");
                    element.parent().parent().parent().find('div.list-extra-log').css('display', 'none');
                }
            });

            // Event handler for feature expand/collapse
            $(document).on('click', '[data-feature]', function(e){
                e.stopPropagation();
                var element = $(this);
                click_data_feature(element, true);
            });

            // Event handler for background expand/collapse
            $(document).on('click', '[data-background]', function(e){
                e.stopPropagation();
                var element = $(this);
                var name = element.attr('data-name-background');
                var tr = $('[data-info-background="'+ name +'"]');
                if(element.hasClass('panel-header')) {
                    // this for click of the tr
                    var tr = element;
                    element = element.find('+ tr').find('small');
                }
                if (element.text().trim() == '{{ 'report.show_background'|get_text }}') {
                    tr.css('display', '')
                    element.text('{{ 'report.hide_background'|get_text }}')
                    element.attr('title', "{{ ('commons.collapse'|get_text).format('background')}}");
                    element.parent('a').attr('data-show', 'true');
                } else {
                    tr.css('display', 'None')
                    element.text('{{ 'report.show_background'|get_text }}');
                    element.attr('title', "{{ ('commons.expand'|get_text).format('background')}}");
                    element.parent('a').attr('data-show', 'false');
                }
            });

            // Event handler for view elements
            $(document).on('click', '[view]', function(e){
                e.stopPropagation();
                var element = $(this);
                var find  = element.attr('find');
                var finder = $(find);
                var word = element.attr('word') || 'scenario';
                if (element.hasClass('glyphicon-menu-right')) {
                    finder.css('display', '')
                    element.removeClass('glyphicon-menu-right');
                    element.addClass('glyphicon-menu-down');
                    element.attr('title', "{{ ('commons.collapse'|get_text).format(word)}}");
                } else {
                    finder.css('display', 'None')
                    element.removeClass('glyphicon-menu-down');
                    element.addClass('glyphicon-menu-right');
                    element.attr('title', "{{ ('commons.expand'|get_text).format(word)}}");
                }
            });

            // Event handler for log and image links
            $(document).on('click', '[data-log],[data-image]', function(e){
                e.preventDefault();
                iframe = true;
                var link = $(this);
                var url = decodeURI(link.attr('href')).replace('C:\\', 'file:///C:/');
                var modal = $('#modal-logs');
                var body_modal = modal.find('div.modal-body');
                body_modal.html('<iframe style="width:100%;height:100%;" frameborder="0" src="' + url + '" />');
                modal.modal('show');
            });

            // Event handler for closing iframe
            $(document).on('click', '[data-close-iframe]', function(){
                iframe = false;
                $('#iframe-container').css('display', 'none');
                $('div.container_body').show();
                $('nav.nav-behavex').show();
                $('html, body').animate({scrollTop: $('tr[data-feature-id='+ scenario_frame+']').offset().top});
            });

            // Event handler for extra logs
            $(document).on('click', '[data-path-extra]', function(e){
                e.preventDefault();
                var div = $($(this).find(" + div")[0]);

                var modal = $('#modal-logs');
                var body_modal = modal.find('div.modal-body');
                var clone_div = div.clone();
                clone_div.css('display', '');

                body_modal.html(clone_div);
                modal.modal('show');
            });

            // Event handler for filter status
            $(document).on('change', '[data-select-filter-status]', function(){
                var selected = $(this).val();
                if (selected == 'all') {
                    show_all();
                } else {
                    filter_status(selected);
                }
            });

            // Event handler for filter tags
            $(document).on('change', '[data-select-filter-tags]', function(){
                var selected = $(this).val();
                if (selected == 'all') {
                    show_all();
                } else {
                    show_tag(selected);
                }
            });

            // Event handler for reset filter
            $(document).on('click', '[data-reset-filter]', function(){
                reset_filters();
                show_all();
            });

            var ua = navigator.userAgent.toLowerCase();
            if (ua.indexOf('safari') != -1) {
                if (ua.indexOf('chrome') == -1) {
                    $('span.glyphicon-share').hide();
                }
            }
            var url = $(location).attr('href');
            var list_url = url.split('#');
            if (list_url.length < 2 || (list_url.length == 2 && list_url[1] == '') ){
                var aux= 0;
                return 0;
            }
            if (list_url.length > 1) {
                var filter = list_url[1].split('=');
            } else {
                return 0;
            }
            if (filter.length > 1) {
                if (filter[0] == 'tag'){
                    show_tag(filter[1]);
                } else if (filter[0] == 'scenario'){
                    show_scenario(filter[1]);
                }
            }
        })

        $("[data-path-extra]").click(function(e){
            e.preventDefault();
            var div = $($(this).find(" + div")[0]);

            var modal = $('#modal-logs');
            var body_modal = modal.find('div.modal-body');
            var clone_div = div.clone();
            clone_div.css('display', '');

            body_modal.html(clone_div);
            modal.modal('show');
        })

        // Old event handlers have been moved to use event delegation in document.ready

        function filter_status(status){
            show_all()
            if (status == 'failed'){
                $('tr[feature_failed] span').click();
                $('tr[feature_error] span').click();  // Also expand features with error status
                $('tr[feature_passed]').hide();
                $('tr[feature_skipped]').hide();
                $($('tr[feature_passed] + tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons')).has('div.alert-warning').hide();
                $($('tr[feature_passed] + tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons')).has('div.alert-success').hide();
                $($('tr[feature_failed] + tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-success')).parents('tr.feature-scenario').hide();
                $($('tr[feature_failed] + tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-warning')).parents('tr.feature-scenario').hide();
                $($('tr[feature_error] + tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-success')).parents('tr.feature-scenario').hide();
                $($('tr[feature_error] + tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-warning')).parents('tr.feature-scenario').hide();
            } else if (status == 'passed'){
                $('tr[feature_failed]').hide();
                $('tr[feature_error]').hide();  // Also hide features with error status
                $('tr[feature_skipped]').hide();
                $('tr[feature_skipped] + tr[data-feature-id] td');
                $($('tr[feature_passed] + tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons')).has('div.alert-warning').hide();
                $($('tr[feature_passed] + tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons')).has('div.alert-danger').hide();
                $('tr[feature_failed]').each(function(){
                    var clickear = false;
                    var div = $(this);
                    if (div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-success').length > 0) {
                        div.find('span').click();
                        div.show();
                        div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-success').parents('tr.feature-scenario').show();
                        div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-danger').parents('tr.feature-scenario').hide();
                        div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-warning').parents('tr.feature-scenario').hide();
                    }
                });
                $('tr[feature_error]').each(function(){
                    var clickear = false;
                    var div = $(this);
                    if (div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-success').length > 0) {
                        div.find('span').click();
                        div.show();
                        div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-success').parents('tr.feature-scenario').show();
                        div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-danger').parents('tr.feature-scenario').hide();
                        div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-warning').parents('tr.feature-scenario').hide();
                    }
                });
                $('tr[feature_passed]').each(function(){
                    var clickear = false;
                    var div = $(this);
                    if (div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-success').length > 0) {
                        div.find('span').click();
                        div.show();
                        div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-success').parents('tr.feature-scenario').show();
                        div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-danger').parents('tr.feature-scenario').hide();
                        div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-warning').parents('tr.feature-scenario').hide();
                    }
                });
            } else if (status == 'skipped'){
                $('tr[feature_skipped]  span').click();
                $('div.alert-danger').parents('tr.feature-scenario').hide();
                $('div.alert-success').parents('tr.feature-scenario').hide();
                $('tr[feature_failed]').each(function(){
                    var div = $(this);
                    if (div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-warning').length > 0){
                        div.find('span').click();
                        div.show();
                    } else {
                        div.hide();
                        div.next().hide();
                    }
                });
                $('tr[feature_error]').each(function(){
                    var div = $(this);
                    if (div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-warning').length > 0){
                        div.find('span').click();
                        div.show();
                    } else {
                        div.hide();
                        div.next().hide();
                    }
                });
                $('tr[feature_passed]').each(function(){
                    var div = $(this);
                    if (div.find(' +  tr[data-feature-id] td[colspan=5] div.panel-default div.panel-body table tr.table_row_commons div.alert-warning').length > 0) {
                        div.find('span').click();
                        div.show();
                    } else {
                        div.hide();
                        div.next().hide();
                    }
                });

            }
        }

        function reset_filters(filters){
            var filters = filters || [];
            if (!(filters.indexOf('tags') >= 0)){
                $('select[data-select-filter-tags] option[selected]').removeAttr('selected');
                $('select[data-select-filter-tags] option[value=all]').attr('selected', 'selected');
            }
            if (!(filters.indexOf('search') >= 0)){
                $('[data-search]').val('');
            }
            if (!(filters.indexOf('status') >= 0)){
                $('select[data-select-filter-status] option[selected]').removeAttr('selected');
                $('select[data-select-filter-status] option[value=all]').attr('selected', 'selected');
            }
        }

        $('[data-reset-filter]').click(function(){
            reset_filters();
            show_all();
         });

        function show_all(){
            $('tr.feature_passed').show();
            $('tr.feature_failed').show();
            $('tr.feature_error').show();  // Also show features with error status
            $('tr.feature_skipped').show();
            $('tr[data-feature-tags]').show();
            $('tr[data-feature-id]').hide();
            $('span.glyphicon-menu-down').click();
            $('tr[class=behavex-row-total]').show();
            $('a[data-show=true]').click();
            $('.feature-scenario').show();
            $('span[data-feature-id]').parents('tr').find('tr').show();
        }

        function show_scenario(id_hash_){
            $('.feature-scenario').hide();
            $('span.glyphicon-menu-down').click();
            $('a[data-show=true]').click();
            reset_filters();
            var id_feature = id_hash_.split('-')[0];
            var id_hash = id_hash_.split('-')[1];
            var span_feature = $('span[data-feature-id="'+ id_feature+'"]');
            span_feature.parents('tr').show();
            click_data_feature(span_feature, false);
            var span_scenario = span_feature.parents('tr').find('+ tr').hide()
            var span_scenario = span_feature.parents('tr').find('+ tr').find('span[data-id-hash='+ id_hash+']');
            span_scenario.parents('tr').show();
            span_scenario.click();
            span_scenario.parents('tr').focus();
            $('tr[class=behavex-row-total]').hide();
        }

        function show_tag(tag){
            features = $('tr[data-feature-tags]');
            features.show()
            $('span.glyphicon-menu-down').click();
            $('tr[data-scenario-tags]').show();
            $('a[data-show=true]').click();
            $('select[data-select-filter-tags] option[value='+ tag +']').attr('selected', 'selected');
            reset_filters(['tags']);

            for (index = 0; index < features.length; ++index) {
                var feature = $(features[index]);
                if (eval(feature.attr('data-feature-tags')).indexOf(tag) < 0) {
                    feature.hide();
                } else {
                    feature.find('span[data-feature]').click();
                }
            }
            scenarios = $('tr[data-scenario-tags]');
            for (index = 0; index < scenarios.length; ++index) {
                var scenario = $(scenarios[index]);
                if (eval(scenario.attr('data-scenario-tags')).indexOf(tag) < 0){
                    scenario.hide();
                }
            }
            $('tr[class=behavex-row-total]').hide();
            expanded = document.querySelectorAll("button[aria-controls='collapse-filters']")[0].getAttribute("aria-expanded")
            if(expanded=="false") {
                document.querySelectorAll("button[aria-controls='collapse-filters']")[0].click()
            }
        }

        function click_data_feature(element, all) {
            element.children('tr .feature-scenario').show();

            var id = element.attr('data-feature-id');
            var tr = $('tr[data-feature-id='+ id +']');
            if (element.hasClass('glyphicon-menu-right')) {
                tr.css('display', '')
                element.removeClass('glyphicon-menu-right');
                element.addClass('glyphicon-menu-down');
                element.attr('title', "{{ ('commons.collapse'|get_text).format('scenarios')}}");
            } else {
                tr.css('display', 'None')
                element.removeClass('glyphicon-menu-down');
                element.addClass('glyphicon-menu-right');
                element.attr('title', "{{ ('commons.expand'|get_text).format('scenarios')}}");
            }

        }
        function copyToClipboard(value) {
              // Create a "hidden" input
              var aux = document.createElement("input");

              // Assign it the value of the specified element
              aux.setAttribute("value", value);

              // Append it to the body
              document.body.appendChild(aux);

              // Highlight its content
              aux.select();

              // Copy the highlighted text
              document.execCommand("copy");

              // Remove it from the body
              document.body.removeChild(aux);
        }

        var scenario_frame = '';
        // These direct event bindings have been replaced with event delegation in document.ready
        // $('[data-log],[data-image]').click(function(e){ ... });
        // $('[data-close-iframe]').click(function(){ ... });
        var scenarios_autocomplete = Array();
        {%- for scenario, id in scenarios -%}
            scenarios_autocomplete.push({'label':'{{ scenario|replace("\\", "\\\\")|replace("'","\\'")|safe }}',
            'desc':'{{ id }}','value': '{{ scenario|replace("\\", "\\\\")|replace("'","\\'")|safe  }}' });
        {%- endfor -%}
        var search = $('[data-search]');
        search.autocomplete({
            source: scenarios_autocomplete,
            select: function(event, ui){
                show_scenario(ui.item.desc);
            }
        });

        $(document.querySelectorAll("button[aria-controls='collapse-metrics']")).on('click', function(e){
            metrics_panel = document.getElementById("collapse-metrics")
            if(metrics_panel.classList.contains('metrics-hidden')) {
                e.stopPropagation();
                metrics_panel.classList.remove('metrics-hidden');
                var ctxAutomationRate = document.getElementById("chart-automation-rate").getContext("2d");
                var ctxPassRate = document.getElementById("chart-pass-rate").getContext("2d");
                var ctxSteps = document.getElementById("chart-steps").getContext("2d");
                window.pieChart1 = new Chart(ctxAutomationRate, pieDataAutomationRate);
                window.pieChart2 = new Chart(ctxPassRate, pieDataPassRate);
                window.scatterChart1 = new Chart(ctxSteps, scatterDataSteps);
            }
         });

        //CHARTS SECTION
        var
        green = '#71C176';
        high_green = '#61B566';
        red = '#F7819F';
        high_red = '#E87296';
        grey = '#999';
        high_grey = '#777'
        muted_failed = '{{ muted }}' || 1;

        var decodeHtmlEntity = function(x) {
          return x.replace(/&#(\d+);/g, function(match, dec) {
            return String.fromCharCode(dec);
          });
        };

        var scatterDataSteps = {
            type: 'scatter',
            data: {
                datasets: [{
                    labels: [
                        {%- for step_name, step_dict in steps.items() -%}
                            {%- if step_dict["overall_status"] == "passed" -%}
                                decodeHtmlEntity('{{step_name}}'),
                            {%- endif -%}
                        {%- endfor -%}
                        ],
                    label: 'Passed',
                    data: [
                        {%- for step_name, step_dict in steps.items() -%}
                            {%- if step_dict["overall_status"] == "passed" -%}
                                { x: {{step_dict['executions']}}, y: {{'%.1f' % (step_dict['avg'])}} },
                            {%- endif -%}
                        {%- endfor -%}
                        ],
                    backgroundColor: green
                },{
                    labels: [
                        {%- for step_name, step_dict in steps.items() -%}
                            {%- if step_dict["overall_status"] == "failed" or step_dict["overall_status"] == "error" -%}
                                decodeHtmlEntity('{{step_name}}'),
                            {%- endif -%}
                        {%- endfor -%}
                        ],
                    label: 'Failed',
                    data: [
                        {%- for step_name, step_dict in steps.items() -%}
                            {%- if step_dict["overall_status"] == "failed" or step_dict["overall_status"] == "error" -%}
                                { x: {{step_dict['executions']}}, y: {{'%.1f' % (step_dict['avg'])}} },
                            {%- endif -%}
                        {%- endfor -%}
                        ],
                    backgroundColor: red
                }],
            },
            options: {
                scales: {
                    x: {
                        min: 0,
                        title: {
                            display: true,
                            text: 'Executions'
                        },
                        ticks: {
                            stepSize: 1
                        }
                    },
                    y: {
                        min: 0,
                        title: {
                            display: true,
                            text: 'Duration (avg)'
                        },
                        ticks: {
                            stepSize: 1
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(ctx) {
                                // console.log(ctx);
                                var label = [ctx.dataset.labels[ctx.dataIndex]];
                                label.push("- Executions: " + ctx.parsed.x);
                                label.push("- Duration (avg): " + ctx.parsed.y + "s");
                                return label;
                            }
                        }
                    }
                }
            }
        };

        var pieDataAutomationRate = {
            type: 'pie',
            data: {
                labels: ['Automated', 'Manual'],
                datasets: [{
                    data: [{{ total - not_automated }}, {{ not_automated }}],
                    backgroundColor: [green, grey],
                    borderWidth: 0.5 ,
                    borderColor: '#ddd'
                }]
            }
        };


        var pieDataPassRate = {
            type: 'pie',
            data: {
                labels: ['Passed', 'Failed'],
                datasets: [{
                    data: [{{ passed }}, {{ failed }}],
                    backgroundColor: [green, red],
                    borderWidth: 0.5 ,
                    borderColor: '#ddd'
                }]
            }
        };

        {%- set total_executions = steps.values() | sum(attribute='executions') -%}
        {%- if total_executions > 0 and total_steps > 0 -%}
            document.getElementById("reusability").innerHTML = "&nbsp;&nbsp;&nbsp;(Executions: {{ total_executions }}, Avg. Reusability: {{ '%0.1f' % (total_executions/total_steps) }})";
        {%- endif -%}
        //]]>
{% endblock %}
